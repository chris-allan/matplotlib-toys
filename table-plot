#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''

:author: Emil Rozbicki <emil@glencoesoftware.com>
:author: Chris Allan <callan@glencoesoftware.com>

Simple matplotlib routines
Copyright (C) 2013 Glencoe Software, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

'''
import argparse
import logging
from getpass import getpass
import omero
import omero.clients
from omero.model import OriginalFileI, PlateI, PlateAnnotationLinkI, ImageI, \
                        FileAnnotationI, RoiI, PointI
import csv
import numpy as np
import cv2
import cv2.cv as cv
import os
import os.path
from matplotlib import pyplot as plt
import time
import math

img2ThreshVal = 0.7
minCellSize = 20
maxCellSize = 70
pi = 3.14159265359

NS = 'openmicroscopy.org/omero/bulk_annotations'
#NS = 'openmicroscopy.org/omero/measurement'

IMAGE_QUERY = 'select i from Image as i ' \
              'join fetch i.pixels as p ' \
              'join fetch p.pixelsType ' \
              'join fetch i.wellSamples as ws ' \
              'join fetch ws.well as w ' \
              'join fetch w.plate '

LOGGING_FORMAT = '%(asctime)s %(levelname)-7s [%(name)16s] %(message)s'

log = logging.getLogger('gs.table-plot')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--server', help='OMERO server name')
    parser.add_argument(
        '-p', '--port', type=int, help='OMERO server port', default=4064
    )
    parser.add_argument('-u', '--username', help='OMERO username')
    parser.add_argument('-k', '--session_key', help='OMERO session key')
    parser.add_argument(
        '-v', '--verbose', action='store_const', dest='logging_level',
        const=logging.DEBUG, default=logging.INFO,
        help='Enable more verbose logging'
    )
    parser.add_argument(
        '-d', '--debug', action='store_true', default=False,
        help='Turn on debugging'
    )
    parser.add_argument(
        '--group_by', default='Well',
        help='Column to group values by'
    )
    parser.add_argument(
        '--histogram', action='append', default=list(),
        help='Plot a histogram for the column'
    )
    parser.add_argument(
        '--polar', action='append', default=list(),
        help='Plot a polar histogram for the column'
    )
    parser.add_argument(
        '-l', '--list', action='store_true', default=False,
        help='List columns in table'
    )
    parser.add_argument(
        'object_id',
        help='OMERO object or container to analyse (ex. Image:1)'
    )

    args = parser.parse_args()
    if args.username and args.session_key is None:
        args.password = getpass("OMERO password for '%s': " % args.username)
    elif args.username is None and args.session_key is None:
        parser.error('Username or session key must be provided!')
    logging.basicConfig(format=LOGGING_FORMAT, level=args.logging_level)

    client = connect(args)
    try:
        run_analyser(client, args)
    finally:
        client.closeSession()
        
def connect(args):
    client = omero.client(args.server, args.port)
    if args.username is not None:
        session = client.createSession(args.username, args.password)
    else:
        session = client.joinSession(args.session_key)
    ec = session.getAdminService().getEventContext()
    log.debug('Session key: %s' % ec.sessionUuid)
    return client

def get_table(client, args):
    '''Retrieves the OMERO.tables instance backing our results.'''
    session = client.getSession()
    query_service = session.getQueryService()
    sr = session.sharedResources()
    ctx = {'omero.group': '-1'}
    plate_id = long(args.object_id.split(':')[1])
    params = omero.sys.ParametersI()
    params.addString('ns', NS)
    params.addId(plate_id)
    plate = query_service.findByQuery(
        'select p from Plate as p ' \
        'join fetch p.annotationLinks as a_link ' \
        'join fetch a_link.child as a ' \
        'where a.ns = :ns and p.id = :id ',
        params, ctx
    )
    if plate is not None:
        file_annotation = next(plate.iterateAnnotationLinks()).child
        table_original_file_id = file_annotation.file.id.val
        table = sr.openTable(OriginalFileI(table_original_file_id, False))
        log.info('Using existing table: %d' % table_original_file_id)
        return table
    return 

def run_analyser(client, args):
    table = get_table(client,args)
    try:
        analyser = Analyser(client, args, table)
        if args.list:
            analyser.list()
            return
        analyser.plot()
    finally:
        table.close()

class Analyser(object):
    def __init__(self, client, args, table):
        self.client = client
        self.args = args
        self.table = table
        self.columns = table.getHeaders()
        self.columns_by_name = dict([
            (v.name, {'column': v, 'index': i})
            for i, v in enumerate(self.columns)
        ])
        self.number_of_rows = table.getNumberOfRows()

    def get_index(self, column_name):
        return self.columns_by_name[column_name]['index']

    def group_by(self, group_by_column, metric_column):
        by_column = dict()
        for index in range(len(group_by_column.values)):
            key = group_by_column.values[index]
            group = by_column.setdefault(key, list())
            group.append(metric_column.values[index])
        return by_column.values()

    def list(self):
        log.info('Columns: %r' % self.columns_by_name.keys())

    def plot(self):
        metric_columns = self.args.histogram + self.args.polar
        if len(metric_columns) == 0:
            log.error('Select at least one column to plot!')
            return

        group_by = self.args.group_by
        log.info('Grouping by %r' % group_by)
        log.info('Retrieving %r for %d rows' %
                 (metric_columns, self.number_of_rows))

        data = self.table.read(
            [self.get_index(group_by)] + [
                self.get_index(v) for v in metric_columns
            ], 0, self.number_of_rows + 1
        )

        group_by_column = data.columns[0]
        group_by_column_ids = set(group_by_column.values)
        self.number_of_group_by_column_ids = len(group_by_column_ids)

        bins = range(self.number_of_group_by_column_ids)
        radii = np.ones(2 * self.number_of_group_by_column_ids)


        histograms = list()
        histogram_count = len(metric_columns)
        subplot = int(math.ceil(histogram_count / 3.0)) * 100
        if histogram_count < 3.0:
            subplot += histogram_count * 10
        else:
            subplot += 30

        for index, column_name in enumerate(metric_columns):
            width = 0.8
            subplot += 1
            log.info('Plotting subplot: %d' % subplot)
            group = self.group_by(group_by_column, data.columns[index + 1])
            polar = column_name in self.args.polar
            plt.subplot(subplot, polar=polar)
            plt.xlabel(group_by)

            if polar:
                histogram_data = [
                    (pi / 180) * 2 * np.average(v) for v in group
                ]
                histogram_data += [
                    pi + ((pi / 180) * 2 * np.average(v)) for v in group
                ]
                width = pi / 72
                plt.bar(histogram_data, radii, color='red', align='center',
                        width=width)
            else:
                plt.grid()
                histogram_data = [np.average(v) for v in group]
                plt.bar(bins, histogram_data, color='red', edgecolor='red',
                        align='center', width=width)
            plt.title(column_name)
        plt.show()
    
if __name__ == '__main__':
    main()